@Library('Jenkins-shared-library') _
pipeline {
    agent any 
    parameters{
        choice(name: 'action', choices: 'create\ndelete', description: 'Choose create/Destroy')
        string(name: 'aws_account_id',description: 'Name of the aws account id', defaultValue:'637828493305')
        string(name: 'region',description: 'region of the region', defaultValue:'ap-south-1')
        string(name: 'ECR_repo_name',description: 'Name of the repo', defaultValue:'maroofshaikh09')
        string(name: 'cluster', description: "name of the EKS Cluster", defaultValue: 'AWS-EKS')
    }
    environment{

        ACCESS_KEY = credentials('AWS_ACCESS_KEY_ID')
        SECRET_KEY = credentials('AWS_SECRET_KEY_ID')
    }
    stages{
        stage('git checkout') {
            when { expression { params.action == 'create' }}
            steps{
                script{
                    git branch: "main",
                    url: "https://github.com/maroof16/ci-cd.git"
                }
            }
        }
        // stage('unit mvn test') {
        //     when { expression { params.action == 'create' }}
        //     steps{
        //         script{
        //             mvntest()
        //         }
        //     }
        // }
        // stage('mvn integration test') {
        //     when { expression { params.action == 'create' }}  
        //     steps{
        //         script{
        //             mvnintegrationtest()
        //         }
        //     }
        // }
        // stage('Sonar Static Code Analysis') {
        //     when { expression { params.action == 'create' }}  
        //     steps{
        //         script{
        //             //def StaticCodeAnalysisID = 'sonar-token'
        //             StaticCodeAnalysis()
        //         }
        //     }
        // }
        // stage('Static Code Quality') {
        //     when { expression { params.action == 'create' }}  
        //     steps{
        //         script{
        //             StaticCodeAnalysis()
        //         }
        //    }
        // }
//         stage('mvn build') {
//             when { expression { params.action == 'create' }}
//             steps{
//                 script{
//                     mvnCleanInstall()
//                 }
//             }
//         }
//         stage('Docker image build: ECR repo') {
//             when { expression { params.action == 'create' }}
//             steps{
//                 script{
//                    dockerBuildECR("${params.aws_account_id}","${params.region}","${params.ECR_repo_name}")
//                }
//             }
//         }
//         stage('Docker image Scan: Trivy ') {
//             when { expression { params.action == 'create' }}
//             steps{
//                 script{
//                    dockerImageScanECR("${params.aws_account_id}","${params.region}","${params.ECR_repo_name}")
//                }
//             }
//         }
//         stage('Docker image push: ECR ') {
//             when { expression { params.action == 'create' }}
//             steps{
//                 script{
//                    dockerImagePushECR("${params.aws_account_id}","${params.region}","${params.ECR_repo_name}")
//                }
//             }
//         }
    
        stage('Create EKS Cluster : Terraform'){
            when { expression {  params.action == 'create' } }
            steps{
                script{

                     dir('eks_module') {
                       sh """
                           terraform validate
                           terraform init 
                           terraform plan -var 'access_key=$ACCESS_KEY' -var 'secret_key=$SECRET_KEY' -var 'region=${params.region}'
                           terraform apply -var 'access_key=$ACCESS_KEY' -var 'secret_key=$SECRET_KEY' -var 'region=${params.region}' -auto-approve
                       """
                   }
                }
            }
        }
//         stage('Connect to EKS '){
//             when { expression {  params.action == 'create' } }
//         steps{

//             script{

//                 sh """
//                 aws configure set aws_access_key_id "$ACCESS_KEY"
//                 aws configure set aws_secret_access_key "$SECRET_KEY"
//                 aws configure set region "${params.region}"
//                 aws eks --region ${params.region} update-kubeconfig --name ${params.cluster}
//                 """
//             }
//         }
//         } 
//         stage('Deployment on EKS Cluster'){
//             when { expression {  params.action == 'create' } }
//             steps{
//                 script{
                  
//                   def apply = false

//                   try{
//                     input message: 'please confirm to deploy on eks', ok: 'Ready to apply the config ?'
//                     apply = true
//                   }catch(err){
//                     apply= false
//                     currentBuild.result  = 'UNSTABLE'
//                   }
//                   if(apply){

//                     sh """
//                       kubectl apply -f .
//                     """
//                   }
//                 }
//             }
    }
}